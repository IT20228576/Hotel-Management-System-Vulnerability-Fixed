import { useEffect, useState } from "react";
import axios from "axios";
import "./style.css";
import { Button, Col, Container, Form, Row } from "react-bootstrap";
import Cookies from "js-cookie";
import jwt_decode from "jwt-decode";
import { useHistory } from "react-router-dom"; // Import useHistory

const Login = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const [csrfToken, setCsrfToken] = useState(""); // State to store the CSRF token

  const [user, setUser ] = useState({});
  
  function handleCallbackResponse(response){
    console.log("Encoded JWT ID Token: " + response.credential);
    var userObject = jwt_decode(response.credential);
    console.log(userObject);
    setUser(userObject);

    window.location.href = "/dashboard";
    // document.getElementById("signInDiv").hidden = true;

    // // Redirect to the home page after Google Sign-In
    // // eslint-disable-next-line no-restricted-globals
    // history.push("/home");
  }

  

  const login = async (e) => {
    e.preventDefault();
    try {
      /* Setting the loading state to true. */
      setLoading(true);
      console.log(Cookies.get("_csrf"));

      /* Creating an object with the email and password. */
      const loginData = {
        email,
        password,
        _csrf: csrfToken, // Include the CSRF token in the request
      };

      /* Sending a POST request to the server with the user's email and password. */
      const result = await axios.post("http://localhost:8000/login", loginData);

      /* Checking if the status is true. */
      if (result) {
        setLoading(false);
        localStorage.setItem("type", result?.data?.type);

        window.location.reload();
      }
    } catch (err) {
      setLoading(false);
      alert(err.response.data.errorMessage);
      console.error(err.response.data.errorMessage);
    }
  };

  useEffect(() => {
    // Fetch the CSRF token from the server
    axios
      .get("http://localhost:8000/form")
      .then((response) => {
        setCsrfToken(response.data.csrfToken);
      })
      .catch((error) => {
        console.error("Failed to fetch CSRF token:", error);
      });
  }, []);

  useEffect(() => {
    /* global google */
    google.accounts.id.initialize({
      client_id: "764824017345-jmkfk7nsaj0cblh6qo86ehmjkcgabdvl.apps.googleusercontent.com",
      callback: handleCallbackResponse
    });

    google.accounts.id.renderButton(
      document.getElementById("signInDiv"),
      { theme: "outline", size: "large"}
    );

  }, []);

  return (
    <div className="main">
      <div className="sub-main">
        <div className="main-center">
          <h1 style={{ margin: "2%" }}>Login</h1>
        </div>
        <hr />
        <form border="dark" onSubmit={login}>
          <Container>
            <Row className="justify-content-md-center">
              <Col>
                <Form.Group className="mb-3">
                  <Form.Label>Email</Form.Label>
                  <Form.Control
                    type="email"
                    placeholder="E-mail"
                    required
                    onChange={(e) => setEmail(e.target.value)}
                    value={email}
                  />
                </Form.Group>
              </Col>

              <Col>
                <Form.Group className="mb-3">
                  <Form.Label>Password</Form.Label>
                  <Form.Control
                    type="password"
                    placeholder="Password"
                    required
                    onChange={(e) => setPassword(e.target.value)}
                    value={password}
                  />
                </Form.Group>
              </Col>
            </Row>
          </Container>
          <div className="main-center">
            <Button
              variant="primary"
              size="lg"
              type="submit"
              style={{ width: "40%", float: "center", margin: "5px" }}
            >
              {loading ? (
                <>
                  <span
                    className="spinner-border spinner-border-sm"
                    role="status"
                    aria-hidden="true"
                  ></span>
                  <span className="sr-only">Login...</span>
                </>
              ) : (
                "Login"
              )}
            </Button>
          </div>
        </form>
        <hr />
        <div className="main-center">
          <div id ="signInDiv">   
          { user && 
          <div>
            <img src={user.picture}></img>
            <h3>{user.name}</h3>
          </div>
          }        
          </div>
        </div>
      </div>
    </div>
  );
};

export default Login;
